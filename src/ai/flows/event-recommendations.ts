// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Provides personalized event recommendations based on a user's past ticket purchases.
 *
 * - getEventRecommendations - A function that takes a list of past event
 *   purchases and returns a list of recommended events.
 * - GetEventRecommendationsInput - The input type for getEventRecommendations.
 * - GetEventRecommendationsOutput - The output type for
 *   getEventRecommendations.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GetEventRecommendationsInputSchema = z.object({
  pastEventPurchases: z
    .array(z.string())
    .describe(
      'A list of event descriptions representing the user\'s past ticket purchases.'
    ),
});
export type GetEventRecommendationsInput = z.infer<
  typeof GetEventRecommendationsInputSchema
>;

const GetEventRecommendationsOutputSchema = z.object({
  recommendedEvents: z
    .array(z.string())
    .describe('A list of recommended event descriptions.'),
});
export type GetEventRecommendationsOutput = z.infer<
  typeof GetEventRecommendationsOutputSchema
>;

export async function getEventRecommendations(
  input: GetEventRecommendationsInput
): Promise<GetEventRecommendationsOutput> {
  return getEventRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'eventRecommendationsPrompt',
  input: {schema: GetEventRecommendationsInputSchema},
  output: {schema: GetEventRecommendationsOutputSchema},
  prompt: `You are an event recommendation expert.

  Based on the user's past event purchases, recommend other events that the user might be interested in.

  Past event purchases:
  {{#each pastEventPurchases}}- {{this}}\n{{/each}}`,
});

const getEventRecommendationsFlow = ai.defineFlow(
  {
    name: 'getEventRecommendationsFlow',
    inputSchema: GetEventRecommendationsInputSchema,
    outputSchema: GetEventRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
